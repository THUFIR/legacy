package legacy.gui.panels;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import legacy.database.Clients;
import legacy.database.Queries;
import legacy.database.User;
import legacy.database.UserRole;
import legacy.gui.helpers.ClientsBuilder;
import legacy.gui.panels.Contact;
import legacy.gui.panels.Sale;
import legacy.gui.panels.Vehicle;

public class Details extends javax.swing.JPanel {

    private static final Logger log = Logger.getLogger(Details.class.getName());
    private final Sale s;
    private final Vehicle v;
    private final Contact c;
    private Clients b;
    private User user;
    private Queries q = Queries.INSTANCE;
 //   private int idInt;

    private Details() {
        initComponents();
        List<UserRole> roles = new ArrayList<>();
        roles.add(UserRole.OPENER);
        user = new User("foo", "bar");
        s = new Sale(user);
        v = new Vehicle();
        c = new Contact();
    }

    public Details(User user) {
        this.user = user;
        initComponents();
        s = new Sale(user);
        v = new Vehicle();
        c = new Contact();
        center.add("contact", c);
        center.add("vehicle", v);
        center.add("sale", s);
        if (user.getRoles().contains(UserRole.OPENER)) {
            update.setText("create");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        center = new javax.swing.JTabbedPane();
        south = new javax.swing.JPanel();
        id = new javax.swing.JLabel();
        update = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());
        add(center, java.awt.BorderLayout.CENTER);

        south.setLayout(new java.awt.GridLayout(1, 1));

        id.setText("id");
        south.add(id);

        update.setText("update");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });
        south.add(update);

        add(south, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
        getB();
        int id;
        if (update.getText().equalsIgnoreCase("update")) {
            id = q.update(b);
        } else {
            id = q.persistClient(b);
        }
        c.setClients(new Clients());
        v.nullPop();
        s.nullPop();
        JOptionPane.showMessageDialog(center, b.toString(), b.toString(), JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_updateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane center;
    private javax.swing.JLabel id;
    private javax.swing.JPanel south;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    public void setB(Clients b) {
        c.setClients(b);
        v.setB(b);
        s.setB(b);
  //      idInt = b.getId();
        id.setText(b.getId().toString());
  //      b.setId(idInt);
        log.fine(b.toString());
    }

    public Clients getB() {
        Clients contactBean = c.getClientsBean();
        Clients vehicleBean = v.getB();
        Clients salesBean = s.getB();
        b = new ClientsBuilder(contactBean, vehicleBean, salesBean).getBean();
//        b.setId(idInt);
        return b;
    }

}
